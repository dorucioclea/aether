"""
Django settings for gather2_odk_importer project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import logging

logger = logging.getLogger(__name__)


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def here(x):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), x)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'yqfif65*_d43!c)3-7-$9f3ii%2z#^dox!rjhg6uw_a2$_3(wv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CSRF_COOKIE_DOMAIN = ".ehealthafrica.org"
CSRF_TRUSTED_ORIGINS = [".ehealthafrica.org"]

# Application definition

INSTALLED_APPS = (
    # 'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django_cas_ng',
    'django_extensions',
    'rest_framework',
    'storages',
    'ums_client',

    # gather2 apps
    'api',

)

MIDDLEWARE_CLASSES = (
    # 'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'importer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'importer.wsgi.application'

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.environ.get("STATIC_ROOT", here('../static_root'))


MEDIA_ROOT = here('../media_root')
MEDIA_URL = '/media/'


# If you want to store static files on AWS S3, set DJANGO_S3_FILE_STORAGE
# in an env var when deploying.

if os.environ.get('DJANGO_S3_FILE_STORAGE'):
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_AUTO_CREATE_BUCKET = True
    AWS_S3_FILE_OVERWRITE = False


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('RDS_DB_NAME', 'odk_importer'),
        'PASSWORD': os.environ.get('RDS_PASSWORD', ''),
        'USER': os.environ.get('RDS_USERNAME', 'postgres'),
        'HOST': os.environ.get('RDS_HOSTNAME', 'db'),
        'PORT': os.environ.get('RDS_PORT', '5432'),
    }
}


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # this is default
    'ums_client.backends.UMSRoleBackend'
)

CAS_SERVER_URL = os.environ.get(
    "CAS_SERVER_URL", "https://ums-dev.ehealthafrica.org")
HOSTNAME = os.environ.get("HOSTNAME", "localhost")
CAS_VERSION = 3
CAS_LOGOUT_COMPLETELY = True

# CORS_ORIGIN_ALLOW_ALL = True


# Check possible connection with CORE
def test_gather_core_connection():
    import requests

    fail_action = 'saving XForm responses will not work'

    if GATHER_CORE_URL and GATHER_CORE_TOKEN:
        try:
            # check that the server is up
            h = requests.head(GATHER_CORE_URL)
            assert h.status_code == 200
            logger.info('GATHER_CORE_URL ({}) is up and responding!'.format(GATHER_CORE_URL))
            try:
                # check that the token is valid
                auth_token = {'Authorization': 'Token {}'.format(GATHER_CORE_TOKEN)}
                g = requests.get(GATHER_CORE_URL + '/surveys.json', headers=auth_token)
                assert g.status_code == 200, g.content
                logger.info('GATHER_CORE_TOKEN is valid!')

                return True  # it's possible to connect with core

            except Exception as eg:
                logger.exception(
                    'GATHER_CORE_TOKEN is not valid for GATHER_CORE_URL ({}), {}'.format(
                        GATHER_CORE_URL, fail_action))
        except Exception as eh:
            logger.warning('GATHER_CORE_URL ({}) is not available, {}.'.format(
                GATHER_CORE_URL, fail_action))
    else:
        logger.warning(
            'GATHER_CORE_URL and/or GATHER_CORE_TOKEN are not set, {}.'.format(fail_action))

    return False  # it's not possible to connect with core


GATHER_CORE_URL = os.environ.get('GATHER_CORE_URL')
GATHER_CORE_TOKEN = os.environ.get('GATHER_CORE_TOKEN')
test_gather_core_connection()


# This scriptlet allows you to include custom settings in your local environment
try:
    from local_settings import *  # noqa
except ImportError as e:
    logger.info('No local settings!')
